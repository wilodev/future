require_relative '../../shared_fastlane/deploy_helpers'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

IS_CI = ENV['CI']
XCODE_PROJECT = "futurelearnmobile.xcodeproj"
DEVELOPMENT_TEAM = "2PQ73W9G97"
CODE_SIGN_IDENTITY = "iPhone Distribution"
CI_KEYCHAIN_NAME = "CI"
CI_KEYCHAIN_PASSWORD = SecureRandom.base64
MATCH_APPSTORE_TYPE = 'appstore'
MATCH_DEVELOPMENT_TYPE = 'development'
BETA_APP_IDENTIFIER = "com.futurelearn.mobile"
DEV_APP_IDENTIFIER = "com.futurelearn.mobile.dev"
DRY_RUN = ENV['DRY_RUN'].to_s.downcase == 'true'
BETA_APPLE_ID = "1564975014"
DEV_APPLE_ID = "1590141267"

before_all do
  ensure_git_status_clean
end

after_all do
  reset_git_repo(disregard_gitignore: false)
end

platform :ios do
  desc "Download profile and certs used for development"
  lane :development_download_credentials do
    match(type: MATCH_DEVELOPMENT_TYPE, app_identifier: DEV_APP_IDENTIFIER, readonly: true)
  end

  desc "Regenerate profile and certs used for development"
  lane :development_regenerate_credentials do
    match_nuke(type: MATCH_DEVELOPMENT_TYPE)
    match(type: MATCH_DEVELOPMENT_TYPE, app_identifier: DEV_APP_IDENTIFIER)
  end

  desc "Regenerate profile and certs used for deploying Beta internal release"
  lane :beta_regenerate_credentials do
    match_nuke(type: MATCH_APPSTORE_TYPE)
    match(type: MATCH_APPSTORE_TYPE, app_identifier: BETA_APP_IDENTIFIER)
  end

  desc "Deploy beta app"
  lane :beta_deploy do
    deploy(
      app_identifier: BETA_APP_IDENTIFIER,
      app_apple_id: BETA_APPLE_ID,
      app_name: 'FutureLearn',
      google_service_info_variant: 'prod',
      increment_version_number: true,
      announce_in_slack: true
    )
  end

  desc "Deploy development app"
  lane :dev_deploy do
    deploy(
      app_identifier: DEV_APP_IDENTIFIER,
      app_apple_id: DEV_APPLE_ID,
      app_name: 'FutureLearn',
      display_build_commit: true
    )
  end

  private_lane :deploy do |options|
    BUILD_NUMBER = SharedFastlane::DeployHelpers.generate_build_number
    VERSION_NUMBER = SharedFastlane::DeployHelpers.generate_version_number(lane_context[SharedValues::PLATFORM_NAME])

    app_identifier = options[:app_identifier]

    if options[:increment_version_number]
      increment_version_number_in_xcodeproj(
        version_number: VERSION_NUMBER, target: "futurelearnmobile"
      )
    end

    cocoapods()

    if options[:google_service_info_variant]
      `cp ../GoogleService-Info-#{options[:google_service_info_variant]}.plist ../GoogleService-Info.plist`
    end

    increment_build_number(build_number: BUILD_NUMBER, skip_info_plist: true)

    update_plist(
      plist_path: "futurelearnmobile/Info.plist",
      block: proc do |plist|
        plist['CFBundleIdentifier'] = app_identifier
        plist['CFBundleDisplayName'] = options[:app_name]
        plist['NSAppTransportSecurity'] = {}
      end
    )

    if IS_CI
      create_keychain(
        name: CI_KEYCHAIN_NAME,
        password: CI_KEYCHAIN_PASSWORD,
        default_keychain: true,
        unlock: true,
        timeout: 2700,
        lock_when_sleeps: false
      )
    end

    match_options = {
      app_identifier: app_identifier,
      readonly: true,
      type: MATCH_APPSTORE_TYPE
    }

    if IS_CI
      match(**match_options, keychain_name: CI_KEYCHAIN_NAME, keychain_password: CI_KEYCHAIN_PASSWORD)
    else
      match(**match_options)
    end

    update_project_team(
      path: XCODE_PROJECT,
      teamid: DEVELOPMENT_TEAM,
    )
    update_code_signing_settings(
      use_automatic_signing: false,
      path: XCODE_PROJECT,
      profile_name: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING].values.last,
      code_sign_identity: CODE_SIGN_IDENTITY,
      bundle_identifier: app_identifier
    )

    SharedFastlane::DeployHelpers::with_updated_env_file(include_build_commit: options[:display_build_commit]) do
      build_app(configuration: 'Release')
    end

    unless DRY_RUN
      upload_to_testflight(app_identifier: app_identifier, skip_waiting_for_build_processing: IS_CI, apple_id: options[:app_apple_id])
      upload_symbols_to_crashlytics(dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH])

      if options[:increment_version_number]
        release_tag = SharedFastlane::DeployHelpers.generate_tag_name(lane_context[SharedValues::PLATFORM_NAME], VERSION_NUMBER, BUILD_NUMBER)
        add_git_tag(tag: release_tag)
        push_git_tags(tag: release_tag)
      end

      if options[:announce_in_slack]
        slack(
          message: ":flapp: :green_apple: iOS app version #{VERSION_NUMBER} (#{BUILD_NUMBER}) successfully released :green_apple: :flapp:",
          slack_url: ENV['SLACK_RELEASE_NOTIFICATION_URL']
        )
      end
    end
  end
end
